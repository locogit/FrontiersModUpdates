Code "Roll Over Slide [Sonic]" in "Gameplay" by "Locomotivesss" does "Replaces the slide with a roll." 
//
    #lib "Player"
    #lib "Time"
    #lib "MathHelpers"
    #lib "VectorHelpers"
    #include "Reflection" noemit
    #lib "Reflection"
    #lib "SonicParameters"

    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Collections.Generic;

    static bool ballAnim = false;

    static float rollBallTimer = 0.0f;
    static float rollTime = 0.0f;
    static bool rollBallTimerActive = false;
    const float ROLL_DOWN_SPEED = 1.75f;
    static float rollDownMult = 1.0f;
    static bool exitRollJump = false;

    static float downMomentum = 0.0f;

    static Vector3 rollVelocity;

    static List<Sonic.StateID> BallStates = new(){
        Sonic.StateID.StateJump,
        Sonic.StateID.StateSpin,
        Sonic.StateID.StateDropDash,
        Sonic.StateID.StateSpinBoostCharge,
        Sonic.StateID.StateSpinBoost,
        Sonic.StateID.StateDoubleJump,
        Sonic.StateID.StateBallMove
    };

    static List<string> voiceClips = new(){
        "sa1006",
        "sa1008",
        "sa1040",
        "sa1041",
        "sa1039"
    };

    static string GetVoiceClip() {
        Random rnd = new Random();
        return voiceClips[rnd.Next(voiceClips.Count)]
    };
//
{
    if (Player.GetPlayerType() != Player.PlayerType.Sonic) {
        return;
    }

    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;

    var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

    if (SonicParametersInfo.pData == null)
        return;
    
    float minSpeed = MathHelpers.Clamp(Player.Kinematics.GetHorizontalMagnitude(), 10.0f, 100.0f);

    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.minSpeed, (Player.Status.IsSideView() ? minSpeed : minSpeed * 0.75f));
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.endSpeed, (Player.Status.IsSideView() ? 6.0f : 9.0f));

    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.deceleJerk, (Player.Status.IsSideView() ? 8.0f : 12.0f) / (rollDownMult * 0.5f));
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.deceleJerkContinue, (Player.Status.IsSideView() ? 8.0f : 12.0f) / (rollDownMult * 0.5f));
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.deceleForceMax, (Player.Status.IsSideView() ? 30.0f : 40.0f) / (rollDownMult * 0.5f));

    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.baseRotateForce, 400.0f);
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.baseRotateForceSpeed, 69.0f);
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.maxRotateForce, 3000.0f);
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.frontRotateRatio, 0.5f);
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.rotationForceAutoRun, 275.0f);

    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.common.slidingMaxSlope, 360.0f);
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.movableMaxSlope, 360.0f);
    
    if (Player.Status.IsGrounded()) {
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.gravitySize, 40.0f * rollDownMult);
    }
    else {
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.gravitySize, 1.0f);
    }
    
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.minContinueTime, 0.4f);
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.maxAutoRunTime, 0.45f);
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.sliding.endSpeedAutoRun, 5.0f);

    Sonic.StateID state = Player.State.GetCurrentStateID<Sonic.StateID>();
    Sonic.StateID prevState = Player.State.GetPreviousStateID<Sonic.StateID>();
    
    if (rollBallTimer > 0 && rollBallTimerActive) {
        rollBallTimer -= Time.GetDeltaTime();
    }
    else if (rollBallTimer <= 0 && rollBallTimerActive) {
        rollBallTimerActive = false;
        Player.Effect.PlayAnimationEffect("SPINJUMP");
        Player.Sound.PlaySound(GetVoiceClip());
    }

    if (state == Sonic.StateID.StateSliding) {
        exitRollJump = false;
        rollTime += Time.GetDeltaTime();
        rollVelocity = kinematics->Velocity;
        
        if (kinematics->Velocity.Y < 0) {
            kinematics->Velocity += Player.Kinematics.GetForward() * rollDownMult * 0.075f;
            kinematics->Velocity -= Vector3.UnitY * rollDownMult * 0.1f;
            rollDownMult += Time.GetDeltaTime() * ROLL_DOWN_SPEED;
            rollDownMult = MathHelpers.Clamp(rollDownMult, 1.0f, 30.0f);
            downMomentum = Player.Kinematics.GetMagnitude();
        }
        else {
            rollDownMult = MathHelpers.Lerp(rollDownMult, 0.5f, Time.GetDeltaTime() * ROLL_DOWN_SPEED * 2.0f);
            kinematics->Velocity += Player.Kinematics.GetForward() * downMomentum * Time.GetDeltaTime();
            downMomentum = MathHelpers.Lerp(downMomentum, 1.0f, Time.GetDeltaTime() * 0.5f);
        }
    }
    else {
        rollTime = 0.0f;
        rollDownMult = 1.0f;
    }

    if (state == Sonic.StateID.StateSliding && !ballAnim) {
        downMomentum = 0.0f;
        rollBallTimerActive = true;
        rollBallTimer = 0.1f;
        Player.Effect.StopAnimationEffects();
        Player.Animation.SetAnimation("JUMP_START");
        ballAnim = true;
    }
    else if(state != Sonic.StateID.StateSliding && ballAnim) {
        rollBallTimerActive = false;
        if (!BallStates.Contains(state))
            Player.Effect.StopAnimationEffects();
        ballAnim = false;
    }

    if (state == Sonic.StateID.StateJump && prevState == Sonic.StateID.StateSliding && !exitRollJump) {
        exitRollJump = true;
        
        kinematics->Velocity += Player.Kinematics.GetForward() * rollVelocity.Length() * 0.75f;
        kinematics->Velocity *= new Vector3(0.95f, 0.75f, 0.95f);
        
        Player.Effect.StopAnimationEffects();
        Player.Animation.SetAnimation("ATTACK_BOUNCE");
    }

    if (Player.Input.IsDown(Player.InputActionType.PlayerStomping) && Player.Status.IsGrounded() && (state == Sonic.StateID.StateDropDash || state == Sonic.StateID.StateSpinBoost)) {
        Player.State.SetState(Sonic.StateID.StateSliding);
    }

    if (!Player.Input.IsDown(Player.InputActionType.PlayerStomping) && state == Sonic.StateID.StateSliding && rollTime >= 0.25f) {
        Player.State.SetState(Sonic.StateID.StateRun);
        if (Player.Kinematics.GetHorizontalMagnitude() <= 30.0f)
            kinematics->Velocity += Player.Kinematics.GetForward() * rollVelocity.Length() * 0.15f;
    }
}