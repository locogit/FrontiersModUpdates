Code "Sonic Unleashed Style Sweepkick" in "Gameplay" by "Locomotivesss" does "Double tap b in quick sucession to perform the sweepkick" 
//
    using System;
    using System.Numerics;
    using System.Collections.Generic;
    using System.Media;
    using System.Windows.Media;
    using System.IO;
    using System.Windows.Forms;

    #lib "Time"
    #lib "Sonic"
    #lib "Player"
    #include "BlackboardStatus" noemit
	#lib "BlackboardItem"
    #lib "HMM"
    #lib "INI"

    #load "System.Numerics.dll"
    #load "System.Numerics.Vectors.dll"
    #load "System.Runtime.dll"
    #load "PresentationCore.dll"
    #load "PresentationFramework.dll"
    #load "WindowsBase.dll"
    #load "System.Windows.Forms.dll"

    static float sweepkickParticleTime = 0.3f;
    static float sweepkickCancelTime = 0.3f;
    static float sweepkickHitboxActiveTime = 0.65f;
    static float sweepkickActiveTime = 0.8f;
    static float inputTime = 0.3f;

    static List<Sonic.StateID> SweepkickStates = new()
    {
        Sonic.StateID.StateStand,
        Sonic.StateID.StateRun,
        Sonic.StateID.StateSquat,
        Sonic.StateID.StateSliding,
        Sonic.StateID.StateStandRoot,
        Sonic.StateID.StateStompingLand,
        Sonic.StateID.StateDropDash,
        Sonic.StateID.StateSpringJumpHeadLand,
        Sonic.StateID.StateSpinBoost,
        Sonic.StateID.StateQuickStep,
        Sonic.StateID.StateAcceleCombo1,
        Sonic.StateID.StateAcceleCombo2,
        Sonic.StateID.StateHomingFinish
    };

    static string sweepkickActiveAnim = "BOX_KICK_BOOST_R";

    static float sweepkickTimer = -1.0f;
    static float sweepkickHitboxTimer = -1.0f;
    static float lastPressTime;
    static float sweepkickParticleTimer = -1.0f;
    static int pressCount = 0;
    static float sweepKickCancelTimer = -1.0f;

    static bool init = false;
    static bool isSweepkick = false;
    static bool sweepkickHitbox = false;
    static bool wasSweepkickHitbox = false;

    static Vector3 sweepkickVelocity;

    static MediaPlayer sound = new MediaPlayer();
    static MediaPlayer voice = new MediaPlayer();
    static int voiceChance = 0;
    static Random Random = new Random();

    static void CancelSweepkick(bool effect = true) {
        isSweepkick = false;
        sweepkickHitbox = false;
        if (effect) {
            Player.Effect.StopEffect("sweepkick");
        }
    }

    static bool CanManualExit() {
        return sweepKickCancelTimer <= 0 && sweepKickCancelTimer != -1;
    }

    static bool isCyber = false;

    const string ModFolderName = "Sonic Unleashed Sweepkick";

    static string GetModPath() {
        // Reads the user's current mod profile INI
        var modsDb = HMM.GetModsDatabase();
        string modIniPath = string.Empty;

        // Traverses the mod profile INI to find our mod
        foreach (var entry in modsDb["Mods"])
        {
            if (entry.Value.Contains(ModFolderName))
            {
                // Found our mod, so store the path to its mod.ini in modIniPath
                modIniPath = entry.Value;
            }
        }

        // Ensure mod.ini exists (it always should)
        if (!File.Exists(modIniPath)) {
            MessageBox.Show("Couldn't Find Mold Folder!", "Error", MessageBoxButtons.OK);
            System.Environment.Exit(1);
            return "";
        }
        
        // Get the path to mod.ini
        string modPath = Path.GetDirectoryName(modIniPath);
        return modPath;
    }

    static Dictionary<string, Dictionary<string, string>> GetModINI() {   
        // Get the path to mod.ini
        string modPath = GetModPath();

        // Get the path to our mod config INI
        string configIniPath = Path.Combine(modPath, "config.ini");

        if (!File.Exists(configIniPath)) {
            MessageBox.Show("Couldn't Find INI File!", "Error", MessageBoxButtons.OK);
            System.Environment.Exit(1);
            return new Dictionary<string, Dictionary<string, string>>();
        }

        /* If you intend to store your config params in mod.ini, change configIniPath here
        to modIniPath and remove the previous code until the File.Exists(modIniPath) condition */
        return INI.Read(configIniPath);
    }
//
{
    if (Player.GetPlayerType() != Player.PlayerType.Sonic) {
        return;
    }

    if (BlackboardStatus.Get() == null || BlackboardItem.Get() == null)
    {
        return;
    }

    if (BlackboardStatus.IsSuper()) {
        return;
    }

    isCyber = IS_WORLD_FLAG(IsCyberSpace);

    if (!init)
    {
        init = true;
    }

    sound.Volume = double.Parse(GetModINI()["Main"]["soundVolume"]) / 100.0;
    voice.Volume = double.Parse(GetModINI()["Main"]["voiceVolume"]) / 100.0;
    voiceChance = int.Parse(GetModINI()["Main"]["voiceRandomness"]);
    
    Sonic.StateID state = Player.State.GetCurrentStateID<Sonic.StateID>();
    Sonic.StateID previousState = Player.State.GetPreviousStateID<Sonic.StateID>();

    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;

    if (Player.Input.IsPressed(Player.InputActionType.PlayerStomping) && SweepkickStates.Contains(state) && !isSweepkick)
    {
        pressCount++;
        lastPressTime = inputTime;
    }

    if (!SweepkickStates.Contains(state))
    {
        pressCount = 0;
    }

    if (!Player.Status.IsGrounded() && isSweepkick) {
        CancelSweepkick();
        pressCount = 0;

        if (!Player.Status.IsGroundedSpecial()) {
            Player.State.SetState(Sonic.StateID.StateFall);
        }
    }

    if (sweepKickCancelTimer != -1) {
        if (sweepKickCancelTimer > 0) {
            sweepKickCancelTimer -= Time.GetDeltaTime();
        }
    }
    

    if (pressCount >= 2 && !isSweepkick)
    {
        sweepkickTimer = sweepkickActiveTime;
        sweepkickHitboxTimer = sweepkickHitboxActiveTime;
        sweepkickVelocity = kinematics->Velocity;
        pressCount = 0;
        isSweepkick = true;
        sweepkickHitbox = true;
        sweepkickParticleTimer = sweepkickParticleTime;
        Player.State.SetState(Sonic.StateID.StateKickBox)
        Player.Effect.PlayEffect("sweepkick", "ef_so_cyloop_slash_hit01");
        Player.Animation.SetAnimation(sweepkickActiveAnim);

        sound.Open(new Uri(Path.Combine(GetModPath(), GetModINI()["Main"]["soundName"])));
        sound.Position = new TimeSpan(0);
        sound.Play();

        sweepKickCancelTimer = sweepkickCancelTime;
        
        if (Random.Next(100) <= voiceChance) {
            voice.Open(new Uri(Path.Combine(GetModPath(), GetModINI()["Main"]["voiceName"])));
            voice.Position = new TimeSpan(0);
            voice.Play();
        }
    }

    if (sweepkickParticleTimer != -1.0f) {
        if (sweepkickParticleTimer > 0) {
            sweepkickParticleTimer -= Time.GetDeltaTime();
        }
        else {
            sweepkickParticleTimer = -1.0f;
            Player.Effect.StopEffect("sweepkick");
        }
    }

    if (isSweepkick)
    {
        if ((Player.Input.IsDown(Player.InputActionType.PlayerLeftStep) || Player.Input.IsDown(Player.InputActionType.PlayerRightStep)) && CanManualExit())
        {
            CancelSweepkick();
            Player.State.SetState(Sonic.StateID.StateQuickStep);
        }

        if (Player.Input.IsPressed(Player.InputActionType.PlayerAttack) && !isCyber) {
            CancelSweepkick();
            Player.State.SetState(Sonic.StateID.StateAcceleCombo2);
        }
        
        if (Player.Input.IsPressed(Player.InputActionType.PlayerJump) && CanManualExit()) {
            CancelSweepkick();
            Player.State.SetState(Sonic.StateID.StateRun);
        }

        if (Player.Input.IsDown(Player.InputActionType.PlayerBoost) && CanManualExit()) {
            CancelSweepkick();
            Player.State.SetState(Sonic.StateID.StateStandRoot);
        }

        if (Player.Input.IsDown(Player.InputActionType.PlayerSonicboom) && CanManualExit()) {
            CancelSweepkick();
            Player.State.SetState(Sonic.StateID.StateSpinBoost);
        }

        if (Player.Kinematics.GetHorizontalMagnitude() < sweepkickVelocity.Length() * 0.2f) {
            kinematics->Velocity += Player.Kinematics.GetForward() * sweepkickVelocity.Length();
        }
        float mult = 1.0f - Time.GetDeltaTime() * 1.9f;
        kinematics->Velocity *= mult < 0.0f ? 0.0f : mult;

        if (sweepkickTimer > 0) 
        {
            sweepkickTimer -= Time.GetDeltaTime();
        }
        else {
            kinematics->Velocity = Vector3.Zero;
            CancelSweepkick(false);
            pressCount = 0;
        }
    }
    else 
    {
        if (lastPressTime > 0)
        {
            lastPressTime -= Time.GetDeltaTime();
        }
        else
        {
            pressCount = 0;
        }
    }

    Sonic.StateID NotifyStateSweepkickExit(Sonic.StateID stateId, Sonic.StateID[] stateStackTrace)
    {
        if (stateId == Sonic.StateID.StateJumpBoardLaunch && isSweepkick) {
            CancelSweepkick();
        }
        return stateId;
    }

    Player.State.AddStateNotifyAction<Sonic.StateID>(NotifyStateSweepkickExit);

    if (sweepkickHitboxTimer > 0)
    {
        sweepkickHitboxTimer -= Time.GetDeltaTime();
    }
    else {
        sweepkickHitbox = false;
    }

    if (sweepkickHitbox)
    {
        Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 4.0f);
        Player.Collision.SetEntityCollision(false);
        wasSweepkickHitbox = true;
    }         
    else if (wasSweepkickHitbox)
    {
        Player.Collision.SetCollisionSphere(Player.CollisionType.Default, 1.0f);
        Player.Collision.SetEntityCollision(true);
        wasSweepkickHitbox = false;
    }
}

Patch "Disable Loop Kick on Slide" in "Gameplay" by "Hyper" 
{
    WriteNop
    (
        /* 0x14082EB20 */
        ScanSignature
        (
            "\xE8\xCC\xCC\xCC\xCC\x48\x8B\xCF\xE8\xCC\xCC\xCC\xCC\x48\x8B\xC8\x45\x33\xC0\xB2\x1C",
            "x????xxxx????xxxxxxxx"
        ),

        5
    );
}